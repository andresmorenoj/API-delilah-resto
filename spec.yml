openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/andresmorenoj/API_Delilah-Resto_Andres-Moreno/1.0.0
info:
  description: API RESTFULL para el proyecto final de Acámica. API Delilah Restó permite crear usuarios para hacer pedidos al resaturante, de igual forma permite que un usuario administrador pueda ejecutar el CRUD completo de la API.
  version: "1.0.0"
  title: API Delilah Restó by Andrés Moreno
  contact:
    email: andresmorenojf@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: Cliente
    description: Endpoints para el CRUD de los clientes.
  - name: Administrador
    description: Endpoints para el CRUD de administrador.
paths:
  /registro:
    post:
      tags:
        - "Cliente"
      summary: Crear un cliente nuevo.
      requestBody:
        description: Todos los compos son *requeridos.*
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cliente"
          application/xml:
            schema:
              $ref: "#/components/schemas/Cliente"
      responses:
        201:
          description: Registro exitoso.
          content:
            application/json:
              schema:
                $ref: "#components/schemas/Cliente"
            application/xml:
              schema:
                $ref: "#components/schemas/Cliente"

        400:
          description: Petición mal enviada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Petición mal enviada.
                    example: "Petición mal enviada."
            application/xml:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Petición mal enviada.
                    example: "Petición mal enviada."

        409:
          description: Cliente ya existe.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: El cliente ya exisite.
                    example: "El cliente ya exisite."
                  usuario:
                    $ref: "#/components/schemas/Cliente/properties/usuario"
            application/xml:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: El cliente ya exisite.
                    example: "El cliente ya exisite."
                  usuario:
                    $ref: "#/components/schemas/Cliente/properties/usuario"

  /platos/todos:
    get:
      tags:
        - "Cliente"
      summary: Listar todos los platos.
      parameters:
        - in: header
          name: Token
          description: Se debe enviar el token generado cuando el cliente hace login.
          required: true
          schema:
            type: array
            items:
              type: string

      responses:
        200:
          description: El Token corresponde al cliente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Validadición correcta.
                    example: "Validadición correcta."
                  platos:
                    $ref: "#/components/schemas/Platos"
            application/xml:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Validadición correcta.
                    example: "Validadición correcta."
                  platos:
                    $ref: "#/components/schemas/Platos"

        204:
          description: No hay platos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: No hay platos.
                    example: "No hay platos disponibles para mostrar."
            application/xml:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: No hay platos.
                    example: "No hay platos disponibles para mostrar."

        400:
          description: Usuario y/o contraseña incorrectos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Acceso denegado.
                    example: "accecos denegado - Intenta de nuevo."
            application/xml:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Acceso denegado.
                    example: "accecos denegado - Intenta de nuevo."

components:
  schemas:
    Cliente:
      type: object
      required:
        - idCliente
        - usuario
        - nombreApellido
        - correo
        - telefono
        - contrasenia
      properties:
        idUsuario:
          type: integer
          format: uuid
          example: 1
        usuario:
          type: string
          example: "andresmorenojf"
        nombreApellido:
          type: string
          example: "Andres Moreno"
        correo:
          type: string
          format: email
          example: "andresmorenojf@gmail.com"
        telefono:
          type: string
          example: "+57 4 572 65 98"
        contrasenia:
          type: string
          example: "abc456def123"

    Plato:
      type: object
      required:
        - idPlato
        - nombreLargo
        - nombreCorto
        - foto
        - precio
      properties:
        idPlato:
          type: integer
          format: uuid
          example: 1
        nombreLargo:
          type: string
          example: "Perro caliente con ensalada"
        nombreCorto:
          type: string
          example: "Per Ca Ens"
        foto:
          type: string
          format: url
          example: "delilah-resto.com/plato/per-ca-ens"
        precio:
          type: integer
          example: 7000

    Platos:
      type: array
      items:
        $ref: "#/components/schemas/Plato"

    Direcciones:
      type: object
      required:
        - idDireccion
        - direccion
      properties:
        idDireccion:
          type: integer
          format: uuid
          example: 1
        direccion:
          type: string
          example: "Calle 45 #50 N, barrio la palmas, Medellín"

    Estados:
      type: object
      required:
        - idEstado
        - nuevo
        - confirmado
        - preparacion
        - enviando
        - entregado
        - cancelado
        - fechaModificacion
      properties:
        idEstado:
          type: integer
          format: uuid
          example: 1
        nuevo:
          type: boolean
          example: true
        confirmado:
          type: boolean
          example: false
        preparacion:
          type: boolean
          example: false
        enviando:
          type: boolean
          example: false
        entregado:
          type: boolean
          example: false
        cancelado:
          type: boolean
          example: false
        fechaModificacion:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"

    Pago:
      type: object
      required:
        - idPago
        - efectivo
        - tarjeta
      properties:
        idPago:
          type: integer
          format: uuid
          example: 1
        efectivo:
          type: boolean
          example: false
        tarjeta:
          type: boolean
          example: true
