openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/andresmorenoj/API_Delilah-Resto_Andres-Moreno/1.0.0
info:
  description: API RESTFULL para el proyecto final de Acámica. API Delilah Restó permite crear usuarios para hacer pedidos al resaturante, de igual forma permite que un usuario administrador pueda ejecutar el CRUD completo de la API.
  version: "1.0.0"
  title: API Delilah Restó by Andrés Moreno
  contact:
    email: andresmorenojf@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: Cliente
    description: Endpoints para el CRUD de los clientes.
  - name: Administrador
    description: Endpoints para el CRUD de administrador.
paths:

# ENDPOINTS DEL CLIENTE

  /registro:
    post:
      tags:
        - "Cliente"
      summary: Crear un cliente nuevo.
      requestBody:
        description: Todos los compos son *requeridos.*
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cliente"
      responses:
        201:
          description: Registro exitoso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cliente"

        400:
          description: Petición mal enviada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Petición mal enviada.
                    example: "Petición mal enviada."

        409:
          description: Cliente ya existe.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: El cliente ya exisite.
                    example: "El cliente ya exisite."
                  usuario:
                    $ref: "#/components/schemas/Cliente/properties/usuario"

  /login/cliente:
    post:
      tags:
        - "Cliente"
      summary: Login del cliente
      requestBody:
        description: Se debe enviar *usuario* y *contraseña*
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                usuario:
                  type: string
                  $ref: "#/components/schemas/Cliente/properties/usuario"
                contrasenia:
                  type: string
                  $ref: "#/components/schemas/Cliente/properties/contrasenia"

      responses:
        200:
          description: Usuario y contraña correctos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Token generado.
                    example: "El login del usuaio fue correcto y se generó el Token."
                  toke:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          
        400:
          description: Usuario y/o contraseña inválidos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Usuario y/o contraseña inválidos.
                    example: "Usuario y/o contraseña inválidos, intenta de nuevo"

  /platos/todos:
    get:
      tags:
        - "Cliente"
      summary: Listar todos los platos.
      parameters:
        - in: header
          name: Token
          description: Se debe enviar el token generado cuando el cliente hace login.
          required: true
          schema:
            type: array
            items:
              type: string

      responses:
        200:
          description: El Token corresponde al cliente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Validadición correcta.
                    example: "Validadición correcta."
                  platos:
                    $ref: "#/components/schemas/Platos"

        204:
          description: No hay platos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: No hay platos.
                    example: "No hay platos disponibles para mostrar."

        400:
          description: Usuario y/o contraseña incorrectos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Acceso denegado.
                    example: "accecos denegado - Intenta de nuevo."

  /pedido:
    post:
      tags:
        - "Cliente"
        summary: Realizar pedido
        parameters:
          - in: header
            name: Token
            description: Se debe enviar el Token de validadición del cliente.
            required: true
            schema:
              type: array
              items:
                type: string
        requestBody:
          description: Todos los campos son *obligatorios*
          required: true
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Pedido"

      responses:
        200:
          description: El token corresponde al cliente y todos los campos requeridos fueron enviados correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Validadción correcta.
                    example: "La validadción de l cliente y los comapos fue exitosa"
                  pedido:
                    type: array
                    items:
                      type: object
                      properties:
                        idPedido:
                          $ref: "#/components/schemas/Pedido/properties/idPedido"
                        idCliente:
                          $ref: "#/components/schemas/Pedido/properties/idCliente"
                        nombreCliente:
                          $ref: "#/components/schemas/Cliente/properties/nombreApellido"
                        idPlato:
                          $ref: "#/components/schemas/Pedido/properties/idPlato"              
                        nombrePlato:
                          $ref: "#/components/schemas/Plato/properties/nombreLargo"
                        idDireccion:
                          $ref: "#/components/schemas/Pedido/properties/idDireccion"
                        direccionCliente:
                          $ref: "#/components/schemas/Direcciones/properties/direccion"
                        idEstado:
                          $ref: "#/components/schemas/Pedido/properties/idEstado"
                        estadoPedido:
                          $ref: "#/components/schemas/Estados/properties/nuevo"
                        idPago:
                          $ref: "#/components/schemas/Pedido/properties/idPago"
                        pagoCliente:
                          $ref: "#/components/schemas/Pago/properties/tarjeta"
        204:
          description: El o los platos no están disponibles.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: El o los platos no están disponibles.
                    example: "El o los platos no están disponibles, vuelve a elegir."
                  plato:
                    type: array
                    items:
                      type: object
                      properties:
                        idPlato:
                          $ref: "#/components/schemas/Pedido/properties/idPlato"              
                        nombrePlato:
                          $ref: "#/components/schemas/Plato/properties/nombreLargo"
        400:
          description: El token no corresponde al cliente | No se seleccionó un método de pago.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensajeAutenticacion:
                    type: string
                    default: Acceso denegado.
                    example: "Accecos denegado - Intenta de nuevo."
                  mensajePago:
                    type: string
                    default: No seleccionó ningún método de pago.
                    example: "No seleccionó ningún método de pago - Intenta de nuevo."
        411:
          description: El campo de dirección esta vacío.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: El campo de dirección esta vacío.
                    example: "El campo de dirección esta vacío. Por favor ingresa una dirección"
                  direccion:
                    type: array
                    items:
                      type: object
                      properties:
                        idDireccion:
                          $ref: "#/components/schemas/Pedido/properties/idDireccion"              
                        campoDireccion:
                          type: string
                          example: "No hay dirección para mostrar"
  
  /ver/informacion:
    get:
      tags:
        - "Cliente"
      summary: Ver información personal
      parameters:
        - in: header
          name: Token
          description: Se debe enviar el token que identifica al cliente cuando hace login.  
          required: true
          schema:
            type: array
            items:
              type: string
      
      responses:
        200:
          description: El token corresponde al cliente logueado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  idCliente:
                    $ref: "#/components/schemas/Cliente/properties/idCliente"
                  usuario:
                    $ref: "#/components/schemas/Cliente/properties/usuario"
                  nombreCompleto:
                    $ref: "#/components/schemas/Cliente/properties/nombreApellido"
                  correo:
                    $ref: "#/components/schemas/Cliente/properties/correo"
                  telefono:
                    $ref: "#/components/schemas/Cliente/properties/telefono"
                  direccion:
                    $ref: "#/components/schemas/Cliente/properties/direccion"
                  contrasenia:
                    $ref: "#/components/schemas/Cliente/properties/contrasenia"

        400:
          description: Acceso denegado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Acceso denegado.
                    example: "accecos denegado - Intenta de nuevo."

        401:
          description: La información no corresponde a la del cliente
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: La información no corresponde a la de cliente.
                    example: "La información no corresponde a la del cliente logueado"
                  idCliente:
                    type: string
                    default: Tu autenticacion no fue correcta. No puedes ver esta información.
                    example: Tu autenticacion no fue correcta. No puedes ver esta información.
                  usuario:
                    type: string
                    default: Tu autenticacion no fue correcta. No puedes ver esta información.
                    example: Tu autenticacion no fue correcta. No puedes ver esta información.
                  nombreCompleto:
                    type: string
                    default: Tu autenticacion no fue correcta. No puedes ver esta información.
                    example: Tu autenticacion no fue correcta. No puedes ver esta información.
                  correo:
                    type: string
                    default: Tu autenticacion no fue correcta. No puedes ver esta información.
                    example: Tu autenticacion no fue correcta. No puedes ver esta información.
                  telefono:
                    type: string
                    default: Tu autenticacion no fue correcta. No puedes ver esta información.
                    example: Tu autenticacion no fue correcta. No puedes ver esta información.
                  direccion:
                    type: string
                    default: Tu autenticacion no fue correcta. No puedes ver esta información.
                    example: Tu autenticacion no fue correcta. No puedes ver esta información.
                  contrasenia:
                    type: string
                    default: Tu autenticacion no fue correcta. No puedes ver esta información.
                    example: Tu autenticacion no fue correcta. No puedes ver esta información.

  /editar/informacion:
    put:
      tags:
        - "Cliente"
      summary: Editiar información personal
      parameters:
        - in: header
          name: Token
          description: Se debe enviar el token que identifica al cliente cuando hace login.  
          required: true
          schema:
            type: array
            items:
              type: string
      requestBody:
        description: Información del cliente que va a ser editada
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Cliente"
      
      responses:
        200:
          description: El token corresponde al cliente logueado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Información editada con éxito.
                    example: "La información se actualizó con éxito."
                  idCliente:
                    $ref: "#/components/schemas/Cliente/properties/idCliente"
                  usuario:
                    $ref: "#/components/schemas/Cliente/properties/usuario"
                  nombreCompleto:
                    $ref: "#/components/schemas/Cliente/properties/nombreApellido"
                  correo:
                    $ref: "#/components/schemas/Cliente/properties/correo"
                  telefono:
                    $ref: "#/components/schemas/Cliente/properties/telefono"
                  direccion:
                    $ref: "#/components/schemas/Cliente/properties/direccion"
                  contrasenia:
                    $ref: "#/components/schemas/Cliente/properties/contrasenia"

        400:
          description: Acceso denegado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Acceso denegado.
                    example: "accecos denegado - Intenta de nuevo."

        401:
          description: La información no corresponde a la del cliente
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: La información no corresponde a la de cliente.
                    example: "No se puede editar la información porque no corresponde a la del cliente logueado"
                  idCliente:
                    type: string
                    default: Tu autenticacion no fue correcta. No puedes ver o editar esta información.
                    example: Tu autenticacion no fue correcta. No puedes ver o editar esta información.
                  usuario:
                    type: string
                    default: Tu autenticacion no fue correcta. No puedes ver o editar esta información.
                    example: Tu autenticacion no fue correcta. No puedes ver o editar esta información.
                  nombreCompleto:
                    type: string
                    default: Tu autenticacion no fue correcta. No puedes ver o editar esta información.
                    example: Tu autenticacion no fue correcta. No puedes ver o editar esta información.
                  correo:
                    type: string
                    default: Tu autenticacion no fue correcta. No puedes ver o editar esta información.
                    example: Tu autenticacion no fue correcta. No puedes ver o editar esta información.
                  telefono:
                    type: string
                    default: Tu autenticacion no fue correcta. No puedes ver o editar esta información.
                    example: Tu autenticacion no fue correcta. No puedes ver o editar esta información.
                  direccion:
                    type: string
                    default: Tu autenticacion no fue correcta. No puedes ver o editar esta información.
                    example: Tu autenticacion no fue correcta. No puedes ver o editar esta información.
                  contrasenia:
                    type: string
                    default: Tu autenticacion no fue correcta. No puedes ver o editar esta información.
                    example: Tu autenticacion no fue correcta. No puedes ver o editar esta información.

  /editar/plato:
    put:
      tags:
        - "Cliente"
        summary: Editar plato
      parameters:
        - in: header
          name: Token
          description: Se debe enviar el token que identifica al cliente cuando hace login.
          required: true
          schema:
            type: array
            items:
              type: string

      responses:
        400:
          description: Acceso denegado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Acceso denegado.
                    example: "accecos denegado - No eres administrador."

  /editar/pedido:
    put:
      tags:
        - "Cliente"
        summary: Editar pedido
      parameters:
        - in: header
          name: Token
          description: Se debe enviar el token que identifica al cliente cuando hace login.
          required: true
          schema:
            type: array
            items:
              type: string

      responses:
        400:
          description: Acceso denegado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Acceso denegado.
                    example: "accecos denegado - No eres administrador."

  /eliminar/plato:
    delete:
      tags:
        - "Cliente"
      summary: Eliminar plato
      parameters:
        - in: header
          name: Token
          description: Se debe enviar el token que identifica al cliente cuando hace login.  
          required: true
          schema:
            type: array
            items:
              type: string
      
      responses:
        400:
          description: Acceso denegado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Acceso denegado.
                    example: "accecos denegado - No eres administrador."

  /eliminar/pedido:
    delete:
      tags:
        - "Cliente"
      summary: Eliminar pedido
      parameters:
        - in: header
          name: Token
          description: Se debe enviar el token que identifica al cliente cuando hace login.  
          required: true
          schema:
            type: array
            items:
              type: string
      
      responses:
        400:
          description: Acceso denegado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Acceso denegado.
                    example: "accecos denegado - No eres administrador."

# FIN ENDPOINTS DEL CLIENTE

# ENDPOINTS DEL ADMINISTRADOR
  /login/administrador:
    post:
      tags:
        - "Administrador"
        summary: Login para el administrador
      requestBody:
        description: Se debe enviar el *usuario* y *contraseña*
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                usuaio:
                  $ref: "#/components/schemas/Administrador/properties/usuario"
                contrasenia:
                  $ref: "#/components/schemas/Administrador/properties/contrasenia"
        
      responses:
        200:
          description: Usuario y contraseña correctos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Token generado.
                    example: "El login del usuario administrador fue correcto y se generó el token de validación"
                  toke:
                    $ref: "#/components/schemas/Administrador/properties/token"

        400:
          description: Usuario y/o contrasenia inválidos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Usuario y/o contrasenia inválidos.
                    example: "Usuario y/o contraseña inválidos, intenta de nuevo"

  /{usuario}/actualizar/pedido/{idPedido}:
    put:
      tags:
        - "Administrador"
        summary: Actualizar pedido
      parameters:
        - in: path
          name: usuario
          description: Usuario administrador
          required: true
          schema:
            type: string
        - in: path
          name: idPlato
          description: Se debe enviar el id del pedido que se va a actualizar
          required: true
          schema:
            type: integer
        - in: header
          name: Token
          description: Se debe enviar el token de validación del administrador
          required: true
          schema:
            type: string
      requestBody:
        description: Se debe enviar *mínimo* un atributo del plato para ser modificado.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                idEstado:
                  $ref: "#/components/schemas/Pedido/properties/idEstado"
                estadoNombre:
                  type: string
                  example: "Preparación"
                estado: 
                  $ref: "#/components/schemas/Estados/properties/preparacion"

      responses:
        200: 
          description: Autenticacion exitosa - El pedido existe - El estado del pedido es diferente de *entregado* o *eliminado*
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: Autenticacion exitosa - El pedido existe - El estado del pedido no es *entregado* o *eliminado*
                    example: "El token corresponde al administrador. El pedido existe y se encuentra en un estado diferente de *entregado* o *eliminado*"
                  idEstado:
                    $ref: "#/components/schemas/Pedido/properties/idEstado"
                  estadoNombre:
                    type: string
                    example: "Preparación"
                  estadoAnterior: 
                    $ref: "#/components/schemas/Estados/properties/preparacion"
                  nuevoEstado: 
                    type: boolean
                    example: true

        400:
          description: Autenticacion fallida - Pedido en estado de *entregado* o *eliminado*
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensajeAutenticacion:
                    type: string
                    default: Autenticacion fallida.
                    example: "El token no corresponde a un token de administrador - Autenticacion fallida."
                  mensajePedido:
                    type: string
                    default: Pedido en estado *entregado* o *eliminado*
                    example: "La operación no se puede hacer porque el pedido esta en estado *entregado* o *eliminado*"
                  estadoNombre:
                    type: string
                    example: Entregado
                  estado:
                    type: boolean
                    example: true

        204:
          description: No hay pedido
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    idPedido:
                      $ref: "#/components/schemas/Pedido/properties/idPedido"
                    mensaje:
                      type: string
                      default: No hay pedido.
                      example: El pedido con el ID especificado no existe.

  /{usuario}/crear/plato:
    post:
      tags:
        - "Administrador"
        summary: Crear plato
      parameters:
        - in: path
          name: usuaio
          description: Usuario administrador
          required: true
          schema:
            type: string
        - in: header
          name: Token
          description: Se debe enviar el token de validación del administrador
          required: true
          schema:
            type: string
      requestBody:
        description: Se deben enviar todos los datos requeridos para crear un plato
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Plato"
      
      responses:
        201:
          description: Autenticacion exitosa - Creación del plato exitosa
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensajeAutenticacion:
                    type: string
                    default: Autenticacion exitosa.
                    example: "La autenticacion del asuario fue exitosa y corresponde a un administrador."
                  mensajePlato:
                    type: string
                    default: Creación del plato exitosa.
                    example: "El plato se creó con exito."
                  plato:
                    $ref: "#/components/schemas/Plato"

        400:
          description: Autenticacion fallida | Petición mal enviada
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensajeAutenticacion:
                    type: string
                    default: Autenticacion fallida - El usuario no corresponde a un administrador.
                    example: "No fue posible crear el plato ya que no se pudo autenticar al usuario como administador."
                mensajePeticion:
                  type: string
                  default: Petición mal enviada.
                  example: "Petición mal enviada, por favor verifica que todos los campos se están enviando de forma correcta"

        409:
          description: El plato ya existe
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    default: El plato ya exisite.
                    example: "El plato que estas intentado crear ya se encuentra registrado. Intenta nuevamente con un plato diferente"
                  plato:
                    $ref: "#/components/schemas/Plato"

                  
# FIN ENDPOINTS DEL ADMINISTRADOR

components:
  schemas:
    Cliente:
      type: object
      required:
        - idCliente
        - usuario
        - nombreApellido
        - correo
        - telefono
        - direccion
        - contrasenia
      properties:
        idCliente:
          type: integer
          format: uuid
          example: 1
        usuario:
          type: string
          example: "andresmorenojf"
        nombreApellido:
          type: string
          example: "Andres Moreno"
        correo:
          type: string
          format: email
          example: "andresmorenojf@gmail.com"
        telefono:
          type: string
          example: "+57 4 572 65 98"
        direccion:
          $ref: "#/components/schemas/Direcciones/direccion"
        contrasenia:
          type: string
          example: "abc456def123"

    Plato:
      type: object
      required:
        - idPlato
        - nombreLargo
        - nombreCorto
        - foto
        - precio
      properties:
        idPlato:
          type: integer
          format: uuid
          example: 1
        nombreLargo:
          type: string
          example: "Perro caliente con ensalada"
        nombreCorto:
          type: string
          example: "Per Ca Ens"
        foto:
          type: string
          format: url
          example: "https://dam.cocinafacil.com.mx/wp-content/uploads/2019/04/hot-dog-hawaiano.png"
        precio:
          type: integer
          example: 7000

    Platos:
      type: array
      items:
        $ref: "#/components/schemas/Plato"

    Direcciones:
      type: object
      required:
        - idDireccion
        - direccion
      properties:
        idDireccion:
          type: integer
          format: uuid
          example: 1
        direccion:
          type: string
          example: "Calle 45 #50 N, barrio la palmas, Medellín"

    Estados:
      type: object
      required:
        - idEstado
        - nuevo
        - confirmado
        - preparacion
        - enviando
        - entregado
        - cancelado
        - fechaModificacion
      properties:
        idEstado:
          type: integer
          format: uuid
          example: 1
        nuevo:
          type: boolean
          example: true
        confirmado:
          type: boolean
          example: false
        preparacion:
          type: boolean
          example: false
        enviando:
          type: boolean
          example: false
        entregado:
          type: boolean
          example: false
        cancelado:
          type: boolean
          example: false
        fechaModificacion:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"

    Pago:
      type: object
      required:
        - idPago
        - efectivo
        - tarjeta
      properties:
        idPago:
          type: integer
          format: uuid
          example: 1
        efectivo:
          type: boolean
          example: false
        tarjeta:
          type: boolean
          example: true

    Pedido:
      type: object
      required:
        - idPeido
        - idUsuario
        - idPlato
        - idDireccion
        - idEstado
        - idPago
      properties:
        idPedido:
          type: integer
          format: uuid
          example: 1
        idCliente:
          $ref: "#/components/schemas/Cliente/properties/idCliente"
        idPlato:
          $ref: "#/components/schemas/Plato/properties/idPlato"
        idDireccion:
          $ref: "#/components/schemas/Direcciones/properties/idDireccion"
        idEstado:
          $ref: "#/components/schemas/Estados/properties/idEstado"
        idPago:
          $ref: "#/components/schemas/Pago/properties/idPago"

    Administrador:
      type: object
      required:
        - idAdministrador
        - usuario
        - contrasenia
        - token
      properties:
        idAdministrador:
          type: integer
          format: uuid
          example: 1
        usuario:
          type: string
          example: "adminDR"
        contrasenia:
          type: string
          example: "qeooriu1343"
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          
